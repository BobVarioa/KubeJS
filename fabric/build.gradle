configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
	dev
}

def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":common").file("src/main/resources/kubejs.accesswidener")

loom {
	accessWidenerPath = accessWidenerFile
}

sourceSets {
	main {
		resources {
			srcDir generatedResources
		}
	}
}

dependencies {

	modApi("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
	modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")

	modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}")

	modApi("dev.latvian.mods:rhino-fabric:${rootProject.rhino_version}")

	modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}")
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rootProject.rei_version}")

	modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}")

	implementation(project(path: ":common", configuration: "namedElements")) { transitive false }
	bundle(project(path: ":common", configuration: "namedElements")) { transitive false }
}

// The AW file is needed in :fabric project resources when the game is run.
task copyAccessWidener(type: Copy) {
	from accessWidenerFile
	into generatedResources
}

processResources {
	dependsOn copyAccessWidener

	def toReplace = [
			"version"             : project.version,
			"rhino_version"       : rootProject.rhino_version,
			"architectury_version": rootProject.architectury_version
	]

	inputs.properties toReplace
	filesMatching("fabric.mod.json") {
		expand toReplace
	}
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id
			releaseType = project.artifact_type
			addGameVersion "Fabric"
			addGameVersion "1.18.2"
			mainArtifact(remapJar.archivePath)
			relations {
				requiredDependency 'rhino'
				requiredDependency 'fabric-api'
				requiredDependency 'architectury-api'
				optionalDependency 'roughly-enough-items'
			}
			changelog = getGitChangelog
			changelogType = 'markdown'
		}
	}
}

if(ENV.MODRINTH_TOKEN) {
	modrinth {
		token = ENV.MODRINTH_TOKEN
		projectId = rootProject.modrinth_id
		versionType = "$rootProject.artifact_type"
		versionNumber = "$project.version+$project.name"
		changelog = getGitChangelog()
		uploadFile = remapJar
		gameVersions = ["1.18.2"]
		loaders = ["fabric", "quilt"]
		dependencies {
			required.project('lhGA9TYQ') // arch
			required.project('sk9knFPE') // rhino
			required.project('P7dR8mSH') // fabric api
		}
	}
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = "${rootProject.archives_base_name}-${project.name}"
			from components.java
		}
	}

	repositories {
		if (ENV.FTB_MAVEN_TOKEN) {
			maven {
				url "https://maven.ftb.dev/release"
				credentials {
					username = "latvian"
					password = "${ENV.FTB_MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "latvian"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}
